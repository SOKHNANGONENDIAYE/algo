ALGORITHM algo2
PROCEDURE dot_product(VAR v1: ARRAY_OF INTEGER[2],VAR v2:ARRAY_OF INTEGER[2]) // VECTOR est une structure ou une classe selon les langages
VAR 
    sp: REAL;
BEGIN
    sp := v1[0]* v2[0] + v1[1]*v2[1];
    RETURN sp;
END


ALGORITHM est_perpendiculaire
VAR
    couples : ARRAY_OF INTEGER[n][2][2]; // un vecteur est : couples[0][0] avec x=couples[0][0][0] et  y=couples[0][0][1]
    i : INTEGER;
BEGIN
    FOR i FROM 0 TO couples.length-1 DO
        IF dot_product(couples[i][0],couples[i][1]) = 0 THEN
            Write("Les deux vecteurs sont orthogonaux");
        ELSE
            Write("Ils ne sont pas orthogonaux");
        END_IF
    END_FOR
END




ALGORITHM tri_par_insertion
VAR
    liste : ARRAY_OF INTEGER[n]; // liste de n entiers
    i ,j ,tmp ,permut: INTEGER; // tmp variable temporaire et permut variable de permutation

BEGIN
    FOR i FROM 1 TO liste.length-1 DO
        tmp := liste[i];
        j := i;
        WHILE (j>0 AND liste[J-1]>tmp) DO
            // permutation  , decalage vers la droite de la liste
            permut := l[j];
            l[j] := l[j-1];
            l[j-1] := permut;
            j := j - 1 ;

        END_WHILE
    END_FOR
END
